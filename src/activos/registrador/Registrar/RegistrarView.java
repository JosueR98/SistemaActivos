/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package activos.registrador.Registrar;

import activos.logic.Activo;
import activos.logic.Puesto;
import java.awt.Graphics;
import java.sql.SQLException;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Andr√©s
 */
public class RegistrarView extends javax.swing.JFrame implements Observer {
    
    RegistrarModel model;
    RegistrarController controller;
    

    /**
     * Creates new form RegistrarView
     */
    public RegistrarView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Descripcion del activo");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Categoria");

        jLabel3.setText("Descripcion del Activo");

        jLabel4.setText("Seleccione un puesto");

        jButton1.setText("Registrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(jLabel1)
                                .addGap(44, 44, 44))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
                            .addComponent(jTextField1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(343, 343, 343)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 894, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int rowIndex = 0;int codigo = 0;
        try{
         rowIndex = this.jTable1.getSelectedRow();
         codigo = Integer.parseInt((String) this.jTable1.getValueAt(rowIndex, 0));
        }catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "No has seleccionado ninguna celda.");
            return;
        }
        Puesto p = new Puesto();
        try {
            p=activos.data.PuestosDB.get(codigo);
        } catch (SQLException ex) {
            Logger.getLogger(RegistrarView.class.getName()).log(Level.SEVERE, null, ex);
        }
        String categoria;
        String descripcion;
        int cod;
        try {
            cod=activos.data.PuestosDB.getSiguienteCodigo();
        } catch (SQLException ex) {
            Logger.getLogger(RegistrarView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Activo  ac;
        try {
             
                descripcion = this.jTextArea1.getText();
                if (descripcion.isEmpty()) {
                    throw new Exception("Campo de descripcion no puede estar vacio");
                }
                categoria = this.jTextField1.getText();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage());
                this.limpiar();
                return;
            }
        try {
            ac = new Activo(categoria,descripcion,p);
            activos.data.ActivosDB.add(ac);
            activos.data.BienesDB.registrar(model.getBien().getCodigo());
             JOptionPane.showMessageDialog(rootPane, "Activo registrado correctamente");
                     model.getBien().setEstaRegistrado(true);
            
             model.getControllerPadre().getModel().recargarLista();
                 if(model.getControllerPadre().verificar()){
                   JOptionPane.showMessageDialog(rootPane, "Todos los bienes se han registrado");
                   activos.data.SolicitudesDB.setEstado(model.getControllerPadre().getModel().getSolicitud().getCodigoSolicitud(), 5);
                   model.getControllerPadre().getModel().getControladorPadre().getView().repaint();
             }
             model.getControllerPadre().getView().setVisible(true);
             model.getControllerPadre().getModel().getControladorPadre().getView().repaint();
             model.getControllerPadre().getView().repaint();
             
             
             
            this.setVisible(false);
            
 
        } catch (Exception ex) {
            Logger.getLogger(RegistrarView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    
    public void limpiar(){
        this.jTextField1.setText("");
        this.jTextArea1.setText("");
    }
    
    
    @Override
    public void update(Observable o, Object arg) {
        this.repaint();
    }
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        this.setTitle("Registrar bien");
        this.cargarTablaPuestos();
    }
    
    private void cargarTablaPuestos() {
    DefaultTableModel modelo = new DefaultTableModel();
    
    
        modelo.addColumn("Codigo del Puesto");
        modelo.addColumn("Rol");
        modelo.addColumn("Cedula Funcionario");
        modelo.addColumn("Codigo dependencia");
         
        String[] datos = new String[4];

       
        
        
        if(!model.getPuestos().isEmpty()){
            
            
            for(Puesto puestos: model.getPuestos()){
                datos[0]= "" + puestos.getCodigo();
                datos[1]= puestos.getRol();
                datos[2]= "" + puestos.getFuncionario().getCedula();
                datos[3]= "" + puestos.getDependencia().getCodigoPostal();
                modelo.addRow(datos);
            }
            
          
    }
        
        
     this.jTable1.setModel(modelo); 
        
 }
    
    
    public RegistrarModel getModel() {
        return model;
    }

    public void setModel(RegistrarModel model) {
        this.model = model;
    }

    public RegistrarController getController() {
        return controller;
    }

    public void setController(RegistrarController controller) {
        this.controller = controller;
    }
    
    
    
    
}
