/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package activos.jefe_RRHH.agregarPuesto;

import activos.logic.Dependencia;
import activos.logic.Funcionario;
import activos.logic.Puesto;
import java.awt.Graphics;
import java.sql.SQLException;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Josue R
 */
public class agregarPView extends javax.swing.JFrame implements Observer {

    agregarPModel model;
    agregarPController controller;

    public agregarPModel getModel() {
        return model;
    }

    public void setModel(agregarPModel model) {
        this.model = model;
        model.addObserver(this);
    }

    public agregarPController getController() {
        return controller;
    }

    public void setController(agregarPController controller) {
        this.controller = controller;
    }

    public agregarPView() {
        initComponents();
    }
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        this.setTitle("Registrar nuevo puesto");
        try {
            this.codigoNE.setText("" + activos.data.PuestosDB.getSiguienteCodigo());
        } catch (SQLException ex) {
            Logger.getLogger(agregarPView.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            cargarTablaDependencias();
            cargarTablaFuncionarios();
        } catch (SQLException ex) {
            Logger.getLogger(agregarPView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ROL = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        codigoNE = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDependencias = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaFuncionarios = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(800, 600));

        jButton1.setText("Atras");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("ROL :");

        jLabel2.setText("Codigo :");

        codigoNE.setEditable(false);

        jLabel3.setText("Seleccione la dependencia :");

        tablaDependencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaDependencias.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tablaDependencias);

        jButton2.setText("Registrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tablaFuncionarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaFuncionarios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tablaFuncionarios);

        jLabel4.setText("Seleccione el funcionario (OPCIONAL) :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(59, 59, 59)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(codigoNE, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 84, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(ROL, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2)
                    .addComponent(codigoNE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ROL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        controller.atras();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       // TODO add your handling code here:
        String rol;
        Funcionario funcionario = null;
        Dependencia dependencia = null;
        Puesto p = new Puesto();
        int rowIndexF,rowIndexD, codigoF,codigoD;
        rol = this.ROL.getText();

        try {
            rowIndexD = this.tablaDependencias.getSelectedRow();
            codigoD = Integer.parseInt((String) this.tablaDependencias.getValueAt(rowIndexD, 0));
            dependencia = activos.data.DependenciasDB.get(codigoD);
        } catch (Exception e) {
            JOptionPane.showConfirmDialog(rootPane, "Debiste haber seleccionado una dependencia");
            controller.atras();
            return;
        }
        
        try {
            rowIndexF = this.tablaFuncionarios.getSelectedRow();
            codigoF = Integer.parseInt((String) this.tablaFuncionarios.getValueAt(rowIndexF, 0));
            funcionario = activos.data.FuncionariosDB.get(codigoF);
        } catch (Exception e) {
            funcionario = null;
        }
        
        try {
            p.setRol(rol);
            p.setDependencia(dependencia);
            if(funcionario != null){
            p.setFuncionario(funcionario);
             activos.data.PuestosDB.add(p);
            }else{
                activos.data.PuestosDB.addSinF(p);
            }
           
            JOptionPane.showMessageDialog(rootPane, "Puesto agregado correctamente");
            controller.atras();
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    @Override
    public void update(Observable o, Object arg) {
       this.repaint();
    }

    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ROL;
    private javax.swing.JTextField codigoNE;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaDependencias;
    private javax.swing.JTable tablaFuncionarios;
    // End of variables declaration//GEN-END:variables

    private void cargarTablaDependencias() throws SQLException {
        model.cargarDependencias();
        
        DefaultTableModel tabla = new DefaultTableModel();
        tabla.addColumn("Codigo Postal");
        tabla.addColumn("Nombre");
        tabla.addColumn("Localizacion");
        
        String[] row = new String[3];
        
        for(Dependencia dependencia : model.getDependencias()){
            row[0] = "" + dependencia.getCodigoPostal();
            row[1] = dependencia.getNombre();
            row[2] = dependencia.getUbicacion();
            tabla.addRow(row);
        }
        
        this.tablaDependencias.setModel(tabla);
    }

    private void cargarTablaFuncionarios() throws SQLException {
      model.cargarFuncionarios();
        DefaultTableModel tabla = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tabla.addColumn("Cedula");
        tabla.addColumn("Nombre");
        tabla.addColumn("Correo");

        String[] row = new String[3];
        for (Funcionario funcionario : model.getFuncionarios()) {
            row[0] = "" + funcionario.getCedula();
            row[1] = funcionario.getNombre();
            row[2] = funcionario.getCorreo();
            tabla.addRow(row);
        }
        this.tablaFuncionarios.setModel(tabla);
        this.tablaFuncionarios.getColumnModel().getColumn(0).setPreferredWidth(100);
        this.tablaFuncionarios.getColumnModel().getColumn(1).setPreferredWidth(100);
        this.tablaFuncionarios.getColumnModel().getColumn(2).setPreferredWidth(100);
    }
}
